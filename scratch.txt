Employee Bifurcation and Parsing output prog:

#include <iostream>
#include <string>
#include <fstream>
#include <cmath>
#include <iomanip>
using namespace std;

int main() {
    ifstream file("input.txt"); // Replace with the actual filename

    if (!file.is_open()) {
        cerr << "Error: Could not open the file." << endl;
        return 1;
    }

    string line;
    while (getline(file, line)) {
        // Check if the line starts with "The" to identify departments
        if (line.find("The") == 0) {
            cout << "Department Found: " << line << endl;  // Output department names
        } else {
            // Check for pay grade at the end of the line
            if (line.find("F1") != string::npos) {
                cout << "Employee (F1): " << line << endl;
            } else if (line.find("F2") != string::npos) {
                cout << "Employee (F2): " << line << endl;
            } else if (line.find("F3") != string::npos) {
                cout << "Employee (F3): " << line << endl;
            } else if (line.find("F4") != string::npos) {
                cout << "Employee (F4): " << line << endl;
            } else {
                cout << "Unknown Employee Format: " << line << endl;
            }
        }
    }

    file.close();
    return 0;
}

------------------------------------------------------------------------------------------------------------------------------------

Hour Calculating Debugger step-by-step for F1, F2 and F4 prog:

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <cmath>
using namespace std;

// Function to check if a string starts with a digit
bool startsWithDigit(const string &word) {
   return !word.empty() && isdigit(word[0]);
}

// Function to convert total minutes to rounded hours
double calculateRoundedHours(int hours, int minutes) {
   hours += minutes / 60;
   minutes = minutes % 60;
   double totalHours = hours + minutes / 60.0;
   return round(totalHours * 2) / 2.0;
}

int main() {
   ifstream file("input.txt"); // Replace with the actual filename

   if (!file.is_open()) {
       cerr << "Error: Could not open the file." << endl;
       return 1;
   }

   string line;
   while (getline(file, line)) {
       if (line.find("The") == 0) {
           cout << "Department Found: " << line << endl;
       } else if (line.find("F1") != string::npos || line.find("F2") != string::npos || line.find("F4") != string::npos) {
           int totalHours = 0;
           int totalMinutes = 0;
           istringstream iss(line);
           string word;
           int tempNumber = -1;  // Temporary storage for standalone numbers

           while (iss >> word) {
               // Check if word is in format "xhrs" or "xmin" directly attached
               if (startsWithDigit(word) && (word.find("hour") != string::npos || word.find("hrs") != string::npos)) {
                   int hours = stoi(word.substr(0, word.find_first_of("h")));
                   totalHours += hours;
                   cout << "Adding " << hours << " hours. Total hours so far: " << totalHours << endl;
               } else if (startsWithDigit(word) && (word.find("min") != string::npos || word.find("minutes") != string::npos)) {
                   int minutes = stoi(word.substr(0, word.find_first_of("m")));
                   totalMinutes += minutes;
                   cout << "Adding " << minutes << " minutes. Total minutes so far: " << totalMinutes << endl;
               } else if (isdigit(word[0])) {
                   // Store the number if it's a standalone number
                   tempNumber = stoi(word);
               } else if ((word.find("hour") != string::npos || word.find("hrs") != string::npos) && tempNumber != -1) {
                   // Use tempNumber if we find "hours" or "hrs" after a standalone number
                   totalHours += tempNumber;
                   cout << "Adding " << tempNumber << " hours. Total hours so far: " << totalHours << endl;
                   tempNumber = -1;
               } else if ((word.find("min") != string::npos || word.find("minutes") != string::npos) && tempNumber != -1) {
                   // Use tempNumber if we find "minutes" or "min" after a standalone number
                   totalMinutes += tempNumber;
                   cout << "Adding " << tempNumber << " minutes. Total minutes so far: " << totalMinutes << endl;
                   tempNumber = -1;
               }
           }

           // Calculate rounded total hours
           double roundedHours = calculateRoundedHours(totalHours, totalMinutes);
           cout << "Employee: " << line << endl;
           cout << "Calculated Hours (rounded): " << roundedHours << " hours" << endl;
       } else {
           // Skipping F3 employees for now
           cout << "Skipping F3 employee for now." << endl;
       }
   }

   file.close();
   return 0;
}

-------------------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------------------

PERFECT hours calculated for all categories:

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <cmath>
#include <vector>
using namespace std;

// Function to check if a string starts with a digit
bool startsWithDigit(const string &word) {
    return !word.empty() && isdigit(word[0]);
}

// Function to convert total minutes to rounded hours using ceiling logic for nearest half-hour
double calculateRoundedHours(int hours, int minutes) {
    hours += minutes / 60;
    minutes = minutes % 60;

    if (minutes > 0 && minutes <= 29) {
        return hours + 0.5;  // Round up to the nearest half hour
    } else if (minutes >= 30) {
        return hours + 1.0;  // Round up to the next whole hour
    } else {
        return hours;  // No rounding needed if there are no extra minutes
    }
}

int main() {
    ifstream file("input.txt"); // Replace with the actual filename

    if (!file.is_open()) {
        cerr << "Error: Could not open the file." << endl;
        return 1;
    }

    string line;
    while (getline(file, line)) {
        // Step 1: Display employee categorization
        if (line.find("The") == 0) {
            cout << "Department Found: " << line << endl;  // Output department names
        } else {
            // Check for pay grade at the end of the line
            if (line.find("F1") != string::npos) {
                cout << "Employee (F1): " << line << endl;
            } else if (line.find("F2") != string::npos) {
                cout << "Employee (F2): " << line << endl;
            } else if (line.find("F3") != string::npos) {
                cout << "Employee (F3): " << line << endl;
            } else if (line.find("F4") != string::npos) {
                cout << "Employee (F4): " << line << endl;

                // Process F4 to separate weekday and weekend hours
                vector<pair<int, int>> timeEntries;  // Store each timestamp as a pair (hours, minutes)
                istringstream iss(line);
                string word;
                int tempNumber = -1;  // Temporary storage for standalone numbers

                // Extract all time entries for F4 employees as pairs
                while (iss >> word) {
                    if (startsWithDigit(word) && (word.find("hour") != string::npos || word.find("hrs") != string::npos)) {
                        int hours = stoi(word.substr(0, word.find_first_of("h")));
                        timeEntries.push_back({hours, 0});  // Add hours with 0 minutes
                    } else if (startsWithDigit(word) && (word.find("min") != string::npos || word.find("minutes") != string::npos)) {
                        int minutes = stoi(word.substr(0, word.find_first_of("m")));
                        if (!timeEntries.empty() && timeEntries.back().second == 0) {
                            timeEntries.back().second = minutes;  // Update last entry with minutes
                        } else {
                            timeEntries.push_back({0, minutes});  // Add standalone minutes as (0, minutes)
                        }
                    } else if (isdigit(word[0])) {
                        tempNumber = stoi(word);  // Store the number if it's a standalone number
                    } else if ((word.find("hour") != string::npos || word.find("hrs") != string::npos) && tempNumber != -1) {
                        timeEntries.push_back({tempNumber, 0});  // Add standalone hours with 0 minutes
                        tempNumber = -1;
                    } else if ((word.find("min") != string::npos || word.find("minutes") != string::npos) && tempNumber != -1) {
                        if (!timeEntries.empty() && timeEntries.back().second == 0) {
                            timeEntries.back().second = tempNumber;  // Update last entry with minutes
                        } else {
                            timeEntries.push_back({0, tempNumber});  // Add standalone minutes
                        }
                        tempNumber = -1;
                    }
                }

                // Calculate weekday and weekend hours from the entries
                int weekdayHours = 0, weekdayMinutes = 0;
                int weekendHours = 0, weekendMinutes = 0;

                // First 5 timestamps for weekdays
                for (int i = 0; i < 5 && i < timeEntries.size(); ++i) {
                    weekdayHours += timeEntries[i].first;
                    weekdayMinutes += timeEntries[i].second;
                }

                // Last 2 timestamps for weekends
                if (timeEntries.size() >= 7) {
                    for (int i = 5; i < 7; ++i) {
                        weekendHours += timeEntries[i].first;
                        weekendMinutes += timeEntries[i].second;
                    }
                }

                // Calculate rounded hours for weekday and weekend
                double roundedWeekdayHours = calculateRoundedHours(weekdayHours, weekdayMinutes);
                double roundedWeekendHours = calculateRoundedHours(weekendHours, weekendMinutes);

                cout << "Weekday Hours (rounded): " << roundedWeekdayHours << " hours" << endl;
                cout << "Weekend Hours (rounded): " << roundedWeekendHours << " hours" << endl;

            } else {
                cout << "Unknown Employee Format: " << line << endl;
            }
        }

        // Step 2: Calculate and display total rounded hours for F1, F2 (unchanged for F4 as it’s now handled separately)
        if (line.find("F1") != string::npos || line.find("F2") != string::npos) {
            int totalHours = 0;
            int totalMinutes = 0;
            istringstream iss(line);
            string word;
            int tempNumber = -1;  // Temporary storage for standalone numbers

            while (iss >> word) {
                if (startsWithDigit(word) && (word.find("hour") != string::npos || word.find("hrs") != string::npos)) {
                    int hours = stoi(word.substr(0, word.find_first_of("h")));
                    totalHours += hours;
                } else if (startsWithDigit(word) && (word.find("min") != string::npos || word.find("minutes") != string::npos)) {
                    int minutes = stoi(word.substr(0, word.find_first_of("m")));
                    totalMinutes += minutes;
                } else if (isdigit(word[0])) {
                    tempNumber = stoi(word);  // Store the number if it's a standalone number
                } else if ((word.find("hour") != string::npos || word.find("hrs") != string::npos) && tempNumber != -1) {
                    totalHours += tempNumber;
                    tempNumber = -1;
                } else if ((word.find("min") != string::npos || word.find("minutes") != string::npos) && tempNumber != -1) {
                    totalMinutes += tempNumber;
                    tempNumber = -1;
                }
            }

            // Calculate rounded total hours
            double roundedHours = calculateRoundedHours(totalHours, totalMinutes);
            cout << "Calculated Total Hours (rounded): " << roundedHours << " hours" << endl;
        }
    }

    file.close();
    return 0;
}